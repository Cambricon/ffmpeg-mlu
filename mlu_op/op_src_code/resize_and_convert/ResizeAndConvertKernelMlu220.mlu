/*************************************************************************
 * Copyright (C) [2018] by Cambricon, Inc.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *************************************************************************/
#include "mlu.h"
#include "ResizeAndConvertMacro.h"

#define MAX_SRCNUM 8192
#define MAX_DSTNUM 4096
#define BUFFER_SIZE MAX_SRCNUM * 16 + MAX_DSTNUM * 24
#define SCALE 1
#define NORM 1
/*------------------------------ HELP FUNCTIONS ------------------------------*/
__mlu_func__ uint32_t read_start_time() {
  uint32_t time_low = 0;
  uint32_t time_high = 0;
  __asm__ volatile("mv.sreg.gpr %%perf_start, 1;\n\t"
                   "mv.sreg.gpr %%perf_read, 1;\n\t"
                   "mv.gpr.sreg %[time_low], %%perf_time_stample_low;\n\t"
                   "mv.gpr.sreg %[time_high], %%perf_time_stample_high;\n\t"
                   :[time_low]"+&r"(time_low),
                    [time_high]"+&r"(time_high)
                   );
  return time_low;
}

__mlu_func__ uint32_t read_stop_time() {
  uint32_t time_low = 0;
  uint32_t time_high = 0;
  __asm__ volatile("mv.sreg.gpr %%perf_stop, 1;\n\t"
                   "mv.sreg.gpr %%perf_read, 1;\n\t"
                   "mv.gpr.sreg %[time_low], %%perf_time_stample_low;\n\t"
                   "mv.gpr.sreg %[time_high], %%perf_time_stample_high;\n\t"
                   :[time_low]"+&r"(time_low),
                    [time_high]"+&r"(time_high)
                   );
  return time_low;
}

// load syn & bias from gdram if needed
// mult: the multipiler used in upscaling mode
// layerIn: currently used to indicate yuv mode
__mlu_func__ void loadFilters(
    half* yuvSyn, half* yuvBias,
    half* yuvFilter_gdram, half* yuvBias_gdram,
    int mult) {
  // Load bias/weights for yuv2rgb conv
  __memcpy(yuvBias, yuvBias_gdram,
           CO * sizeof(half), GDRAM2NRAM);
  __memcpy(yuvSyn, yuvFilter_gdram,
           2 * CI * CO * sizeof(half), GDRAM2WRAM);
}

// [Module 1]::genMaskAndWeights
// generate mask && weightX to select proper point column-wisely
// using the formula posSrc = (posDst + 0.5) * scale - 0.5
// integer part of posSrc will be the index
// fractional part of posSrc will be (1 - weight)
/*
 *      | wx0 | wx1 |
 * [Y0X0]-----------[Y0X1]
 *            |
 *        wy0 | wy0
 *            |
 *       -----------
 *            |
 *        wy1 | wy1
 *            |
 * [Y1X0]-----------[Y1X1]
 *
*/
__mlu_func__ void genMaskAndWeights(
    half* weightX, half* maskX0, half* maskX1,
    int scaleX, int d_col, int s_col,
    int channelOut, int dstDealNum, int mult,
    int roi_x, int roi_x_pad, int colLimit) {
  int posX = scaleX / 2 - 32768;  // Initial posSrc where posDst = 0
  half fx = 0.0;                  // fractional part
  int sx = 0;                     // integer part
  half wx0 = 0.0;                 // weight for left point
  half wx1 = 0.0;                 // weight for right point
  int sxPrev = -1;                // prev integer part
  int jPrev = 0;                  // the first new j
  int maskOffsetX0, maskOffsetX1;
  for (int j = 0; j < d_col; j++) {
    // For each point in dst image, we can uniquely determine
    // four points in src image. In down-scaling mode, n dst points
    // has n distict src points, however in up-scaling mode, n dst
    // points can share 1 src points. This results in the replication
    // of src image later in the code.
    fx = (half)((posX & 0xFFFF) >> 1) / 32768 * (int)(posX > 0);
    sx = (posX >> 16) * (int)(posX > 0);
    fx = fx * (int)(sx < colLimit);
    sx = min(sx, colLimit);
    wx0 = (((half)1.f - fx) * SCALE);
    wx1 = (half)SCALE - wx0;
    posX += scaleX;

    // In up-scaling mode, we replicate each src row
    // by a certain number, mult. When generating the mask,
    // we must know which replication shall we use since they
    // represent the same pixel. Thus we need a variable to
    // [recrod the position of first new pixel], i.e., jPrev.
    jPrev  = j * (sxPrev != sx) + jPrev * (sxPrev == sx);
    sxPrev = sx;
    int offsetW0 = j * 4;
    int offsetW1 = (j + dstDealNum) * 4;
    int trueIdx0 = (sx * mult + (j - jPrev)) * 4;
    int trueIdx1 = ((sx+1) * mult + (j - jPrev)) * 4;
    for (int k = 0; k < 4; k++) {
      weightX[offsetW0++] = wx0;
      weightX[offsetW1++] = wx1;
      maskX0[trueIdx0++] = 1;
      maskX1[trueIdx1++] = 1;
    }
  }
}

// [Module 3]::alignSrc()
// remove left padding at the front of each src row, i.e.,
// [X X X X X R G B A R G B A ...] -> [R G B A R G B A ...]
// mask: mask address, used to do bitindex collection
// offset: number of useless data(X) ahead
// dealNum: length of src/dst array
__mlu_func__ void alignSrc(
    half* dst, half* src, half* mask,
    int offset, int dealNum) {
  int zeroCount = offset / 16;
  int remain    = offset % 16;
  for (int i = 0; i < zeroCount; i++) {
    ((uint16_t*)mask)[i] = 0;
  }
  ((uint16_t*)mask)[zeroCount] = (0xFFFF << remain);
#if __BANG_ARCH__ >= 200
  __bang_collect_bitindex(dst, src, mask, PAD_UP(dealNum, 1024));
#else
  __bang_collect_bitindex(dst, src, mask, dealNum);
#endif
  __nramset_short((int16_t*)mask, 64, 0xFFFF);
}

/*---------------------------- MLU ENTRY FUNCTION ----------------------------*/
// reSizedConvert:  A fusionOp of resize and yuv2rgb
// src_gdram:       src image addrs in gdram
// dst_gdram:       dst image addrs in gdram
// yuvFilter_gdram: the filter used to do yuv2rgb conversion
// yuvBias_gdram:   the bias needed by yuv2rgb conversion
// s_row:           number of row of src image
// s_col:           number of col of src image
// d_row:           number of row of dst image
// d_col:           number of col of dst image
// roi_x:           x-cord of upleft cornor of roi box
// roi_y:           y-cord of upleft cornor of roi box
// roi_w:           width of roi box
// roi_h:           height of roi box
// input2half:      1 for uint8 input, 0 for fp16 input
// output2uint:     1 for uint8 output, 0 for fp16 output
// batchNum:        batch number
__mlu_entry__ void ResizeAndConvertKernelMlu220(
    half* dst_gdram,
    half* srcY_gdram,
    half* srcUV_gdram,
    half* yuvFilter_gdram,
    half* yuvBias_gdram,
    int s_row,
    int s_col,
    int d_row,
    int d_col,
    int roi_x,
    int roi_y,
    int roi_w,
    int roi_h,
    int input2half,
    int output2uint,
    int batchNum,
#ifndef RECORD_TIME
    int pad) {
#else
    int pad,
    uint32_t* cycleNum) {
#endif
//#if __BANG_ARCH__ >= 200
//  struct timeval tstart;
//  struct timeval tend;
//  gettimeofday(&tstart, NULL);
//#endif
  // __bang_printf("===== taskId: %d =====\n", taskId);
  // __bang_printf("===== check gdram ptr =====\n");
  // __bang_printf("srcY_gdram: %p\n", srcY_gdram);
  // __bang_printf("srcUV_gdram: %p\n", srcUV_gdram);
  // __bang_printf("dst_gdram: %p\n", dst_gdram);
  /**---------------------- Initialization ----------------------**/
  // padding
  // divide large d_col into repeats * dstDealNum + dstRemainder
  int scaleX = (roi_w << 16) / (d_col);
  int scaleY = (roi_h << 16) / (d_row);
  int d_col_pad = PAD_UP(d_col, PAD_SIZE);
  int dstDealNum = min(MAX_DSTNUM, d_col_pad);
  int repeat     = d_col_pad / dstDealNum;
  int remainder  = d_col_pad % dstDealNum;

  int roi_x_pad = PAD_DN(roi_x, PAD_SIZE);
  int roi_w_pad = PAD_UP(roi_w, PAD_SIZE);
  int srcDealNum = (roi_w_pad) / repeat;
  int srcDealNumPad = PAD_UP(srcDealNum, PAD_SIZE);
  int mult = (int)(roi_w < d_col) * (98304 + (scaleX >> 1)) / scaleX
           + (int)(roi_w >= d_col);
  srcDealNumPad = min(MAX_SRCNUM, srcDealNum);
  roi_w_pad = min(MAX_SRCNUM, roi_w_pad);

  // multi-core related
// #if __BANG_ARCH__ >= 200
  int d_row_seg;
  int batch_seg;
  if (batchNum % taskDim == 0) {
    d_row_seg = d_row;
    batch_seg = batchNum / taskDim;
  } else {
    d_row_seg = d_row / taskDim + int(d_row % taskDim != 0);
    batch_seg = batchNum;
  }
// #else
//   int d_row_seg = d_row / taskDim + int(d_row % taskDim != 0);
// #endif

  // Memory usage
  // Put all const variables(bias, weight, mask) at front of the buffer
  // so that space after them can be used freely without concerning
  // overwritting const variables
  int srcNum = srcDealNumPad * 4;
  int dstNum = dstDealNum * 4;
  int dstNumPad = PAD_UP(d_col * 4, PAD_SIZE);
  int weightNum = dstNum * 2;
  int maskNum = srcNum * mult;
  __wram__ half yuvSyn[2 * CI * CO];
  __nram__ half buffer[BUFFER_SIZE + 2 * CO];
  int spaceLeft = BUFFER_SIZE - CO * 2 - weightNum - MAX_SRCNUM
                - maskNum * 4 - dstNum * 6;
  int rowCopyNum = spaceLeft / (dstNum * (2 - output2uint));
  rowCopyNum = min(rowCopyNum, d_row_seg) / 2 * 2;
  rowCopyNum = 1;

  half* dstBuffer = buffer;
  half* temp    = (half*)((char*)buffer + dstNum * rowCopyNum);
  half* yuvBias = temp  + CO;
  half* weightX = yuvBias + CO;
  half* maskUV  = weightX + weightNum;
  half* maskX0  = maskUV  + MAX_SRCNUM;
  half* maskX1  = maskX0  + maskNum;
  half* src     = maskX1  + maskNum;
  half* sLine0  = src     + maskNum * 2;
  half* sLine1  = sLine0  + dstNum * 2;

  #ifndef MLU_MODE
  std::cout << "spaceLeft: " << spaceLeft << std::endl;
  std::cout << "rowCopyNum: " << rowCopyNum << std::endl;
  #endif
  // Load filter/bias
  loadFilters(yuvSyn, yuvBias,
              yuvFilter_gdram, yuvBias_gdram,
              mult);

// init time
// 0.0056 ms
// #ifdef RECORD_TIME
//   time_stop_low = read_stop_time();
//   ((uint32_t*)srcY_gdram)[0] = (time_stop_low - time_start_low);
// #endif
  /**----------------------- reSizedConvert -----------------------**/
  int dstSize = dstNum * sizeof(half);
  int rowLimit = roi_h - 1;
  int colLimit = roi_w - 1;
  for (int batchId = 0; batchId < batch_seg; batchId++) {
    // int trueBatchId = batchId + taskId * batch_seg * (batch_seg != batchNum);
    int trueBatchId = taskId;
    for (int i = 0; i < repeat; i++) {
      #if __BANG_ARCH__ >= 200
      half* dstAddrsGdram
            = dst_gdram + trueBatchId * d_col * d_row * 4 / (output2uint + 1)
            + taskId * d_row_seg * d_col * 4 / (output2uint + 1) * (batch_seg == batchNum);
      #else
      half* dstAddrsGdram
            = dst_gdram + batchId * d_col_pad * d_row * 4 / (output2uint + 1)
            + taskId * d_row_seg * dstNum / (output2uint + 1);
      #endif
      /* dstDealNum part, count = repeat
       * d_col = dstDealNum * repeat + dstRemainder
       * | dstDealNum_00 | dstDealNum_01| ... | dstRemainder_0 |
       *   .               .                    .
       *   .               .                    .
       *   .               .                    .
       * | dstDealNum_N0 | dstDealNum_N1| ... | dstRemainder_N |
       *
       * Note: dstDealNum_00 ... dstDealNum_N0 share the same mask and weights
       * so the order of LOAD/COMP/STORE looks like:
       * |   /|   /|  ...
       * |  / |  / |  ...
       * | /  | /  |  ...
       * |/   |/   |/ ...
      */
      // Not implmented yet
      // Inside each column of dstDealNum, e.g., 00->N0
      // we do the follow things:

      /*###############################*/
      /*#[Module 1]: genMaskAndWeights#*/
      /*###############################*/
      __bang_write_zero(maskX0, srcNum * mult);
      __bang_write_zero(maskX1, srcNum * mult);
      genMaskAndWeights(weightX, maskX0, maskX1,
                        scaleX, d_col, s_col,
                        4, dstDealNum, mult,
                        roi_x, roi_x_pad, colLimit);
      __nramset_short((int16_t*)maskUV, MAX_SRCNUM, 0xFFFF);

  // load time
  // 0.24 ms
      /*############################################*/
      /*#[Module 2]: loadTwoLines(Four in YUV mode)#*/
      /*############################################*/
      // posY and finalPosY locate which segment of src
      // resizeOp is dealing with (multi-core support)
      // fy(fractional part of posY) records the weight
      // sy(integer part of posY) records the position
      half* dstLine0 = src;
      half* dstLine1 = dstLine0 + 2 * dstNum;
      int posY = (d_row_seg * taskId * (batch_seg == batchNum)) * scaleY
               + (scaleY >> 1) - 32768;
      half fy = 0.0;
      int sy = 0;
      half wy0 = 0.0;
      half wy1 = 0.0;
      int dstCount = 0;
      for (int j = 0; j < d_row_seg; ++j) {
        fy = (half)((posY & 0xFFFF) >> 1) / 32768 * (int)(posY > 0);
        sy = (posY >> 16) * (int)(posY > 0);
        fy = fy * (int)(sy < rowLimit) + (int)(sy == rowLimit);
        sy = min(sy, rowLimit - 1) + roi_y;
        wy0 = (half)1.f - fy;
        wy1 = fy;
        posY += scaleY;

        // if input is YUV420, convert input to RGBA/BGRA/ARGB/ABGR
        // compute offsets for each row
        // #if __BANG_ARCH__ < 200
        // int offsetY1  = ((sy + s_row * trueBatchId) * s_col) + roi_x;
        // int offsetY2  = (sy + 1 + s_row * trueBatchId) * s_col + roi_x;
        // int offsetUV1 = (sy / 2 + s_row * trueBatchId / 2) * s_col + roi_x;
        // int offsetUV2 = ((sy + 1) / 2 + s_row * trueBatchId / 2) * s_col + roi_x;
        // #else
        int offsetY1 = sy * s_col + roi_x;
        int offsetY2 = (sy + 1) * s_col + roi_x;
        int offsetUV1 = sy / 2 * s_col + roi_x;
        int offsetUV2 = (sy + 1) / 2 * s_col + roi_x;
        // #endif

        if (input2half) {
        #if __BANG_ARCH__ < 200
          // pad down the offset so that the offset is 32B aligned
          int offsetY1_pad  = PAD_DN(offsetY1, PAD_SIZE);
          int offsetY2_pad  = PAD_DN(offsetY2, PAD_SIZE);
          int offsetUV1_pad = PAD_DN(offsetUV1, PAD_SIZE);
          int offsetUV2_pad = PAD_DN(offsetUV2, PAD_SIZE);

          srcDealNumPad += PAD_SIZE;
          int dealSize = srcDealNumPad * sizeof(char);
          half* Y = sLine0;
          char* UV = (char*)Y + 2 * srcDealNumPad;
          // Load two lines of Y and one line of UV
          __memcpy(Y, *((char**)srcY_gdram + trueBatchId) + offsetY1_pad,
                   dealSize, GDRAM2NRAM);
          __memcpy((char*)Y + srcDealNumPad,
                   *((char**)srcY_gdram + trueBatchId) + offsetY2_pad,
                   dealSize, GDRAM2NRAM);
          __memcpy(UV, *((char**)srcUV_gdram + trueBatchId) + offsetUV1_pad,
                   dealSize, GDRAM2NRAM);
          __memcpy((char*)UV + srcDealNumPad,
                   *((char**)srcUV_gdram + trueBatchId) + offsetUV2_pad,
                   dealSize, GDRAM2NRAM);

          /*#################################*/
          /*#[Module 3]: Preprocess(For YUV)#*/
          /*#################################*/
          __bang_uchar2half(src, (unsigned char*)Y, srcDealNumPad * 4);
          alignSrc(sLine0,
                   src,
                   maskUV,
                   offsetY1 - offsetY1_pad,
                   srcDealNumPad);
          alignSrc(sLine0 + srcDealNumPad - PAD_SIZE,
                   src + srcDealNumPad,
                   maskUV,
                   offsetY2 - offsetY2_pad,
                   srcDealNumPad);
          alignSrc(sLine0 + (srcDealNumPad - PAD_SIZE) * 2,
                   src + srcDealNumPad * 2,
                   maskUV,
                   offsetUV1 - offsetUV1_pad,
                   srcDealNumPad);
          alignSrc(sLine0 + (srcDealNumPad - PAD_SIZE) * 3,
                   src + srcDealNumPad * 3,
                   maskUV,
                   offsetUV2 - offsetUV2_pad,
                   srcDealNumPad);
          srcDealNumPad -= PAD_SIZE;
          #else
          int dealSize = srcDealNumPad * sizeof(char);
          half* Y = sLine0;
          char* UV = (char*)Y + 2 * srcDealNumPad;

          // Load two lines of Y and one line of UV
          __memcpy(Y, *((char**)srcY_gdram + trueBatchId) + offsetY1,
                   dealSize, GDRAM2NRAM);
          __memcpy((char*)Y + srcDealNumPad,
                   *((char**)srcY_gdram + trueBatchId) + offsetY2,
                   dealSize, GDRAM2NRAM);
          __memcpy(UV, *((char**)srcUV_gdram + trueBatchId) + offsetUV1,
                   dealSize, GDRAM2NRAM);
          __memcpy((char*)UV + srcDealNumPad,
                   *((char**)srcUV_gdram + trueBatchId) + offsetUV2,
                   dealSize, GDRAM2NRAM);
          __bang_uchar2half(src, (unsigned char*)Y, srcDealNumPad * 4);
          #endif

          /*######################*/
          /*#[Module 4]: YUV2RGB0#*/
          /*######################*/
          /* Fold input YUV data so that the input channel becomes CI(32)
           * Memory is continuous in this (-->) direction (in_width /= CI)
           * [Y1,1 Y1,2 ... Y1,31 Y1,32] ... [Y2,1 Y2,2 ... Y2,31 Y2,32] ...
           * [U1,1 V1,1 ... U1,16 V1,16] ... [U2,1 U2,2 ... U2,16 V2,16] ...
           * Input shape: 1(N) x 2(H) x s_col/CI(W) x CI(C)
           *
           * For each CI of input, we need 4 X CI kernels to convert
           * CI gray pixcels into 4 X CI RGBA pixcels. Each kernel has
           * a shape of: 1 x 2 x 1 x CI. For example,
           * [ 1.164  0     0 ... 0] -> 1.164 * Y1,1 -> R1,1
           * [ 0      1.586   ... 0]  + 1.586 * V1,1
           * [ 1.164  0     0 ... 0] -> 1.164 * Y1,1 -> G1,1
           * [-0.392 -0.813 0 ... 0]  - 0.392 * U1,1 - 0.813 * V1,1
           * ...
           * ...
           * [ 0 0 1.164 0     0 ... 0] -> 1.164 * Y1,3 -> R1,3
           * [ 0 0 0     1.586 0 ... 0]  + 1.586 * V1,2
           * ...
           * Total 4 X CI pixcels hence 4 X CI kernels
          */
          // conv params in order
          // in_channel = CI;
          // in_height = 2;
          // in_width = srcDealNumPad * 2 / CI;
          // filter_height = 2;
          // filter_width = 1;
          // stride_height = 1;
          // stride_width = 1;
          // out_channel = CO;
          // __bang_printf("===== YUV2RGB START =====\n");
  #if __BANG_ARCH__ >= 200
          __bang_half2fix16_rd(
            (int16_t*)sLine0,
            src,
            srcDealNumPad * 4, -7);

          __bang_conv(
            src, (int16_t*)sLine0, (int16_t*)yuvSyn,
            CI, 2, srcDealNumPad * 2 / CI,
            2, 1, 1, 1, CO, -20);
  #else
          __bang_conv(src, sLine0, yuvSyn,
                 CI, 2, srcDealNumPad * 2 / CI,
                 2, 1, 1, 1, CO);
  #endif
          __bang_cycle_add(src, src, yuvBias, srcNum * 2, CO);

          // truncate values < 0
          __bang_active_relu(src, src, srcNum * 2);

          // truncate values > 255
          __nramset_half(temp, 64, 255);
          __bang_cycle_sub(src, src, temp, srcNum * 2, 64);
          __bang_mul_const(src, src, -1, srcNum * 2);
          __bang_active_relu(src, src, srcNum * 2);
          __bang_mul_const(src, src, -1, srcNum * 2);
          __bang_cycle_add(src, src, temp, srcNum * 2, 64);
        }

        // Select data using the mask gegerated in [1]
        // For example,
        /* Before:
         * [Y0X0 Y0X1] ... [Y0X4 Y0X5] ... [Y0X8 Y0X9] ...
         * [Y1X0 Y1X1] ... [Y1X4 Y1X5] ... [Y1X8 Y1X9] ...
         *  .    .          .    .          .    .
         *  .    .          .    .          .    .
         *
         * After:
         * Y0X0 Y0X4 Y0X8 ... Y0X1 Y0X5 Y0X9 ...
         * Y1X0 Y1X4 Y1X8 ... Y1X1 Y1X5 Y1X9 ...
         * .    .    .        .    .    .
         * .    .    .        .    .    .
        */
        __bang_collect(sLine0,
                       src,
                       maskX0, maskNum);
        __bang_collect(sLine0 + dstNum,
                       src,
                       maskX1, maskNum);
        __bang_collect(sLine1,
                       src + maskNum,
                       maskX0, maskNum);
        __bang_collect(sLine1 + dstNum,
                       src + maskNum,
                       maskX1, maskNum);

        // move calculation from [Module 2] to here to optimize
        // up-sclaing mode.
        /*####################################*/
        /*#[Module 6]. Bilinear Interpolation#*/
        /*####################################*/
        // x_star0 = Y0X0 * wx0 + Y0X1 * wx1
        __bang_mul(dstLine0, sLine0, weightX,
                 dstNum * 2);
        __bang_add(dstLine0, dstLine0, dstLine0 + dstNum,
                 dstNum);

        // x_star1 = Y1X0 * wx0 + Y1X1 * wx1
        __bang_mul(dstLine1, sLine1, weightX,
                 dstNum * 2);
        __bang_add(dstLine1, dstLine1, dstLine1 + dstNum,
                 dstNum);

        // x_star = x_star0 * wy0 + x_star1 * wy1
        __bang_mul_const(dstLine0, dstLine0, wy0, dstNum);
        __bang_mul_const(dstLine1, dstLine1, wy1, dstNum);
        __bang_add(dstLine0, dstLine0, dstLine1, dstNum);

        /*##################################################################*/
        /*#[Module 7]: Postprocess && Store Data#*/
        /*##################################################################*/
        half* dst = dstLine0;
        half* dstMask = dst + dstNum;
        if (output2uint) {
          dstSize = dstNumPad * sizeof(char);
          __nramset_half(temp, 64, 127);
          __bang_cycle_gt(dstMask, dst, temp, dstNum, 64);
          __bang_mul_const(dstMask, dstMask, 256, dstNum);
          __bang_sub(dstMask, dst, dstMask, dstNum);
          __bang_half2uchar_dn((signed char*)dstBuffer + dstCount * dstNumPad,
                               dstMask, PAD_UP(dstNum, 128));
        }
        dstCount = dstCount + 1;
        // if dstBuffer is full, copy out
        if (dstCount == rowCopyNum) {
          #if __BANG_ARCH__ >= 200
          __memcpy(dstAddrsGdram + i * dstDealNum,
                   dstBuffer, d_col * 4, NRAM2GDRAM,
                   d_col * 4,
                   dstNumPad,
                   rowCopyNum - 1);
          dstAddrsGdram += d_col * 2 * rowCopyNum;
          #else
          __memcpy(dstAddrsGdram + i * dstDealNum,
                    dstBuffer, dstSize * rowCopyNum, NRAM2GDRAM);
          dstAddrsGdram += dstSize / 2 * rowCopyNum;
          #endif

          dstCount = 0;
        }
      }

      // if dstBuffer is not empty, copy out
      #if __BANG_ARCH__ < 200
      if (d_row_seg % rowCopyNum > 0) {
        __memcpy(dstAddrsGdram,
                 dstBuffer, dstSize * (d_row_seg % rowCopyNum), NRAM2GDRAM);
      }
      #else
      if (d_row_seg % rowCopyNum > 0) {
        __memcpy(dstAddrsGdram,
                 dstBuffer, d_col * 4, NRAM2GDRAM,
                 d_col * 4,
                 dstNumPad,
                 (d_row_seg % rowCopyNum) - 1);
      }
      #endif
    }
  }
// finish time
// 1.98 ms

//#if __BANG_ARCH__ >= 200
//  gettimeofday(&tend, NULL);
//  uint32_t time_usec = (uint32_t)tend.tv_usec - (uint32_t)tstart.tv_usec;
//  uint32_t time_sec = (uint32_t)tend.tv_sec - (uint32_t)tstart.tv_sec;
//  // printf("Hardware Total Time: %.3f ms\n", time_usec / 1000.0);  // FIXME
//  // printf("Hardware Total Time: %u us\n", time_usec);
//#endif
}
